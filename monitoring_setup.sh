#!/bin/bash
# Script para configurar monitoramento e alertas no Google Cloud

echo "=== Configura√ß√£o de Monitoramento e Alertas ==="
echo ""

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

PROJECT_ID=$(gcloud config get-value project 2>/dev/null)
if [ -z "$PROJECT_ID" ]; then
    echo -e "${RED}‚ùå Nenhum projeto configurado${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Projeto: ${PROJECT_ID}${NC}"
echo ""

# Habilita APIs necess√°rias
echo -e "${YELLOW}üìã Habilitando APIs de monitoramento...${NC}"
gcloud services enable monitoring.googleapis.com
gcloud services enable logging.googleapis.com
gcloud services enable clouderrorreporting.googleapis.com
gcloud services enable cloudtrace.googleapis.com

echo ""

# Cria notification channel (email)
echo -e "${YELLOW}üìß Configurando notifica√ß√µes por email...${NC}"
read -p "Email para receber alertas: " NOTIFICATION_EMAIL

# Cria o notification channel
NOTIFICATION_CHANNEL=$(gcloud alpha monitoring channels create \
    --display-name="Quiz App Alerts" \
    --type=email \
    --channel-labels=email_address=${NOTIFICATION_EMAIL} \
    --format="value(name)")

echo -e "${GREEN}‚úÖ Canal de notifica√ß√£o criado: ${NOTIFICATION_CHANNEL}${NC}"

# Cria policy de alerta para alta taxa de erro
echo -e "${YELLOW}üö® Criando alerta para alta taxa de erro...${NC}"
cat > error_rate_policy.json << EOF
{
  "displayName": "Quiz App - Alta Taxa de Erro",
  "documentation": {
    "content": "Taxa de erro da aplica√ß√£o Quiz App est√° muito alta",
    "mimeType": "text/markdown"
  },
  "conditions": [
    {
      "displayName": "Taxa de erro > 5%",
      "conditionThreshold": {
        "filter": "resource.type=\"gae_app\" AND metric.type=\"appengine.googleapis.com/http/server/response_count\"",
        "aggregations": [
          {
            "alignmentPeriod": "300s",
            "perSeriesAligner": "ALIGN_RATE",
            "crossSeriesReducer": "REDUCE_SUM",
            "groupByFields": ["resource.label.module_id"]
          }
        ],
        "comparison": "COMPARISON_GREATER_THAN",
        "thresholdValue": 0.05,
        "duration": "300s"
      }
    }
  ],
  "notificationChannels": ["${NOTIFICATION_CHANNEL}"],
  "alertStrategy": {
    "autoClose": "1800s"
  }
}
EOF

gcloud alpha monitoring policies create --policy-from-file=error_rate_policy.json
rm error_rate_policy.json

# Cria policy de alerta para alta lat√™ncia
echo -e "${YELLOW}‚è±Ô∏è  Criando alerta para alta lat√™ncia...${NC}"
cat > latency_policy.json << EOF
{
  "displayName": "Quiz App - Alta Lat√™ncia",
  "documentation": {
    "content": "Lat√™ncia da aplica√ß√£o Quiz App est√° muito alta",
    "mimeType": "text/markdown"
  },
  "conditions": [
    {
      "displayName": "Lat√™ncia > 2 segundos",
      "conditionThreshold": {
        "filter": "resource.type=\"gae_app\" AND metric.type=\"appengine.googleapis.com/http/server/response_latencies\"",
        "aggregations": [
          {
            "alignmentPeriod": "300s",
            "perSeriesAligner": "ALIGN_MEAN",
            "crossSeriesReducer": "REDUCE_MEAN"
          }
        ],
        "comparison": "COMPARISON_GREATER_THAN",
        "thresholdValue": 2000,
        "duration": "300s"
      }
    }
  ],
  "notificationChannels": ["${NOTIFICATION_CHANNEL}"],
  "alertStrategy": {
    "autoClose": "1800s"
  }
}
EOF

gcloud alpha monitoring policies create --policy-from-file=latency_policy.json
rm latency_policy.json

# Cria dashboard personalizado
echo -e "${YELLOW}üìä Criando dashboard personalizado...${NC}"
cat > dashboard.json << EOF
{
  "displayName": "Quiz App Dashboard",
  "mosaicLayout": {
    "tiles": [
      {
        "width": 6,
        "height": 4,
        "widget": {
          "title": "Requests por Minuto",
          "xyChart": {
            "dataSets": [
              {
                "timeSeriesQuery": {
                  "timeSeriesFilter": {
                    "filter": "resource.type=\"gae_app\" AND metric.type=\"appengine.googleapis.com/http/server/request_count\"",
                    "aggregation": {
                      "alignmentPeriod": "60s",
                      "perSeriesAligner": "ALIGN_RATE"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      {
        "width": 6,
        "height": 4,
        "xPos": 6,
        "widget": {
          "title": "Lat√™ncia M√©dia",
          "xyChart": {
            "dataSets": [
              {
                "timeSeriesQuery": {
                  "timeSeriesFilter": {
                    "filter": "resource.type=\"gae_app\" AND metric.type=\"appengine.googleapis.com/http/server/response_latencies\"",
                    "aggregation": {
                      "alignmentPeriod": "60s",
                      "perSeriesAligner": "ALIGN_MEAN"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      {
        "width": 12,
        "height": 4,
        "yPos": 4,
        "widget": {
          "title": "Taxa de Erro",
          "xyChart": {
            "dataSets": [
              {
                "timeSeriesQuery": {
                  "timeSeriesFilter": {
                    "filter": "resource.type=\"gae_app\" AND metric.type=\"appengine.googleapis.com/http/server/response_count\"",
                    "aggregation": {
                      "alignmentPeriod": "300s",
                      "perSeriesAligner": "ALIGN_RATE",
                      "crossSeriesReducer": "REDUCE_SUM",
                      "groupByFields": ["response_code_class"]
                    }
                  }
                }
              }
            ]
          }
        }
      }
    ]
  }
}
EOF

DASHBOARD_URL=$(gcloud monitoring dashboards create --config-from-file=dashboard.json --format="value(name)")
rm dashboard.json

echo -e "${GREEN}‚úÖ Dashboard criado${NC}"

# Configura log-based metrics
echo -e "${YELLOW}üìù Configurando m√©tricas baseadas em logs...${NC}"

# M√©trica para logins de admin
gcloud logging metrics create admin_logins \
    --description="Contagem de logins de admin" \
    --log-filter='resource.type="gae_app" AND textPayload:"admin_logged_in"'

# M√©trica para erros da aplica√ß√£o
gcloud logging metrics create app_errors \
    --description="Contagem de erros da aplica√ß√£o" \
    --log-filter='resource.type="gae_app" AND severity>=ERROR'

echo ""
echo -e "${GREEN}‚úÖ Monitoramento configurado com sucesso!${NC}"
echo ""
echo -e "${BLUE}üìã Recursos criados:${NC}"
echo "‚Ä¢ Canal de notifica√ß√£o por email"
echo "‚Ä¢ Alerta para alta taxa de erro"
echo "‚Ä¢ Alerta para alta lat√™ncia"
echo "‚Ä¢ Dashboard personalizado"
echo "‚Ä¢ M√©tricas baseadas em logs"
echo ""
echo -e "${BLUE}üîó Links √∫teis:${NC}"
echo "‚Ä¢ Dashboard: https://console.cloud.google.com/monitoring/dashboards"
echo "‚Ä¢ Alertas: https://console.cloud.google.com/monitoring/alerting"
echo "‚Ä¢ Logs: https://console.cloud.google.com/logs"
echo "‚Ä¢ Error Reporting: https://console.cloud.google.com/errors"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  Importante:${NC}"
echo "‚Ä¢ Configure o billing para receber notifica√ß√µes de custos"
echo "‚Ä¢ Revise os alertas periodicamente"
echo "‚Ä¢ Monitore o dashboard regularmente"